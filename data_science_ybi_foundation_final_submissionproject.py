# -*- coding: utf-8 -*-
"""data science YBI foundation final submissionproject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wPHuMih0Yx_b57UL-9XizAleNwOpqy8m
"""

#Classification Model to Identify Multiple Disease
#Data Science internship project
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

dataframe = pd.read_csv("https://raw.githubusercontent.com/ybifoundation/Dataset/main/MultipleDiseasePrediction.csv")
dataframe

dataframe.head()

# getting some info about the data
dataframe.info()

# verify shape
dataframe.shape

# summary statistics
dataframe.describe()

# check for missing value
dataframe.isnull()

# checking for missing values
dataframe.isnull().sum()

names = dataframe.columns.values 
print(names)

dataframe.std()

# check for categories
dataframe.prognosis.value_counts()

dataframe.prognosis.unique()

dataframe.prognosis.nunique()

# correlation
#no need

# column names
dataframe.columns

# visualize pairplot
import seaborn as sns
sns.pairplot(dataframe)

# define y
Y = dataframe['prognosis']
print(Y)

# define X
X = dataframe.drop(['prognosis'],axis=1)
print(X)

# split data
from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.2, stratify=Y, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

# verify shape
len(X_train)

len(X_test)

# select model
from sklearn.ensemble import RandomForestClassifier
classifier =RandomForestClassifier(n_estimators = 100, criterion = 'gini')

#RandomForestClassifier()
# train model
classifier.fit(X_train, Y_train)

# model accuracy
# accuracy score on the training data
X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)
print('Accuracy score of the training data : ', training_data_accuracy)

# accuracy score on the test data
X_test_prediction = classifier.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy score of the test data : ', test_data_accuracy)

# predict with model
Y_predict=classifier.predict(X_test)

X_test

# model evaluation
classifier.score(X_test,Y_test)

# model confusion matrix
from sklearn.metrics import classification_report

# model classification report
print(classification_report(Y_test,Y_predict))

# future prediction

X.shape

X.head()

X.describe()

# predict for X_new
X_new = X.sample()

classifier.predict(X_new)